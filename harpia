#!/usr/bin/env python3


# "A necessidade é a mãe da invenção."
#                           - Platão.

#? Módulos ------------------------------------------------------------------------------------->

import subprocess
import secrets
import string
import readline
import os
import fileinput
from datetime import datetime


#? Banner ------------------------------------------------------------------------------------->
def banner():
    subprocess.run("clear")
    print('''\033[0;36m
          
                      .---.        .------------       |    
                     /     \  __  /    -------         |    
                    / /     \(,,)/    -----            |         ╦ ╦╔═╗╦═╗╔═╗╦╔═╗
                   //////   ' \/ `   ----              |         ╠═╣╠═╣╠╦╝╠═╝║╠═╣
                  //// / // :    : ----                |         ╩ ╩╩ ╩╩╚═╩  ╩╩ ╩
                 // /   /  /`    '---                  |
                //          //..\\\\ 
        ====================UU===UU============================================================
                            //||\\\\  
                                            
    \033[m''')


#? Menu ------------------------------------------------------------------------------------->

def menu():
    print('''
         \033[0;30;46m Gerenciar usuários \033[m           \033[0;30;46m Gerenciar arquivos \033[m                \033[0;30;46m Outros \033[m \033[0;36m
       [1] Adicionar usuário         [7]  Função exclusiva              [11] Limpar tela
       [2] Excluir usuário           [8]  Função exclusiva              [12] Logs da Harpia
       [3] Bloquear usuário          [9]  Função exclusiva              [13] Ver conexões ativas
       [4] Desbloquear usuário      [10]  Função exclusiva              [0] Sair...
       [5] Resetar senha            
       [6] Todos os usuários
    \033[m''')
    

#? Carregar a lista de usuários do Samba -------------------------------------------------------->

def carregarUsuariosSamba():
    resultadoPdbedit = subprocess.run(['pdbedit', '-L'], stdout=subprocess.PIPE, text=True)
    
    listaBrutaSamba = resultadoPdbedit.stdout
    listaTratadaSamba = [line.split(':')[0] for line in listaBrutaSamba.splitlines()]
    
    return listaTratadaSamba


# Processo de autocomplete  ------------------------------------------------------------------------------------->

def autocomplete(text, state):
    comandos = [user for user in usuarios if user.startswith(text)]
    if state < len(comandos):
        return comandos[state] 
    else:
        return None
    

#? Adicionando usuário ------------------------------------------------------------------------------------->

def adicionarUsuario():
    
    banner()
    print("   \033[0;30;46m [1] Adicionar usuário. \033[m \n")
    name = input("Digite o nome do usuário: ")
    banner()
    
    resultadoGrep = subprocess.call(["grep", name, "/etc/passwd"], stdout=subprocess.DEVNULL)
    caracteres =  string.ascii_letters + string.digits + "!@#$%&*-_=+"
    password = ''.join(secrets.choice(caracteres) for i in range(12))
    useradd = ["useradd", "--no-create-home", name, "--password", password]
    smbpasswd = ["smbpasswd", "-a", name]
    
    if resultadoGrep != 0:
        subprocess.run(useradd)
        subprocess.run(smbpasswd, input=f'{password}\n{password}', text=True, stdout=subprocess.DEVNULL)
        
        with open('/var/log/harpia.log', 'a') as arquivo:
            arquivo.write(f'{horario} O usuário {name} foi adicionado.\n')

        menu()
        
        print("Usuário criado com sucesso!\n")
        print("Usuário: \033[0;36m" + name + "\033[m")
        print("Senha: \033[0;36m" + password + "\033[m \n")

    else:
        menu()
        print("O usuário já existe, tente novamente. \n")
        

#? Excluindo usuário ------------------------------------------------------------------------------------->

def excluirUsuario():
    
    readline.set_completer(autocomplete)
    readline.parse_and_bind('tab: complete')
    
    banner()    
    print("   \033[0;30;46m [2] Excluir usuário. \033[m \n")
    name = input("Digite o nome do usuário: ")
    banner()
    
    resultadoGrep = subprocess.call(["grep", "-E", f"^{name}:", "/etc/passwd"], stdout=subprocess.DEVNULL)
    

    if resultadoGrep == 0:
        subprocess.run(["userdel", name], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(["pdbedit", "-x", name], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        with open('/var/log/harpia.log', 'a') as arquivo:
            arquivo.write(f'{horario} O usuário {name} foi excluído.\n')
    
        menu()
        print(f"\nUsuário \033[0;36m{name}\033[m excluído com sucesso!\n")    
    
    else:
        menu()
        print("O usuário não existe.\n")


#? Bloquear usuário ------------------------------------------------------------------------------------->

def bloquearUsuario():
    
    readline.set_completer(autocomplete)
    readline.parse_and_bind('tab: complete')
    
    banner()
    print("   \033[0;30;46m [3] Bloquear usuário. \033[m \n")
    name = input("Digite o nome do usuário: ")
    banner()
    resultadoGrep = subprocess.call(["grep", "-E", f"^{name}:", "/etc/passwd"], stdout=subprocess.DEVNULL)
    
    if resultadoGrep == 0:
        subprocess.run(["usermod", "-L", name], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(["smbpasswd", "-d", name], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        with open('/var/log/harpia.log', 'a') as arquivo:
            arquivo.write(f'{horario} O usuário {name} foi bloqueado.\n')
        
        menu()
        print(f"\nUsuário \033[0;36m{name}\033[m bloqueado com sucesso!\n")
        
        
    else:
        menu()
        print("O usuário não existe.\n")
    
    
#? Desbloquear usuário ------------------------------------------------------------------------------------->

def desbloquearUsuario():
    
    readline.set_completer(autocomplete)
    readline.parse_and_bind('tab: complete')
    
    banner()
    print("   \033[0;30;46m [4] Desbloquear usuário. \033[m \n")
    name = input("Digite o nome do usuário: ")
    banner()
    resultadoGrep = subprocess.call(["grep", "-E", f"^{name}:", "/etc/passwd"], stdout=subprocess.DEVNULL)
    
    if resultadoGrep == 0:
        subprocess.run(["usermod", "-U", name], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(["smbpasswd", "-e", name], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        with open('/var/log/harpia.log', 'a') as arquivo:
            arquivo.write(f'{horario} O usuário {name} foi desbloqueado.\n')
        
        menu()
        print(f"\nUsuário \033[0;36m{name}\033[m desbloqueado com sucesso!\n")
        
        
    else:
        menu()
        print("O usuário não existe.\n")
    

#? Resetar senha ------------------------------------------------------------------------------------->

def resetarSenha():
    
    readline.set_completer(autocomplete)
    readline.parse_and_bind('tab: complete')
    
    banner()
    print("   \033[0;30;46m [5] Resetar senha. \033[m \n")
    name = input("Digite o nome do usuário: ")
    banner()
    resultadoGrep = subprocess.call(["grep", "-E", f"^{name}:", "/etc/passwd"], stdout=subprocess.DEVNULL)
    caracteres =  string.ascii_letters + string.digits + "!@#$%&*-_=+"
    password = ''.join(secrets.choice(caracteres) for i in range(12))
    
    if resultadoGrep == 0:
        subprocess.run(["passwd", name], input=f'{password}\n{password}', text=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(["smbpasswd", name], input=f'{password}\n{password}', text=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        with open('/var/log/harpia.log', 'a') as arquivo:
            arquivo.write(f'{horario} O usuário {name} teve a senha alterada.\n')

        menu()
        
        print("\nSenha alterada com sucesso!\n")
        print("Usuário: \033[0;36m" + name + "\033[m")
        print("Senha: \033[0;36m" + password + "\033[m \n")

    else:
        menu()
        print("O usuário não existe.\n")
        
        
#? Pesquisar usuário ------------------------------------------------------------------------------------->

def exibirUsuarios(usuarios, numeroColunas):
    banner()
    usuarios.sort()
        
    # Calcula o número máximo de linhas necessário
    num_linhas = -(-len(usuarios) // numeroColunas)  # Divisão inteira arredondada para cima
    
    menu()
    
    for i in range(num_linhas):
        linha = []
        for j in range(numeroColunas):
            index = i + j * num_linhas
            if index < len(usuarios):
                linha.append(f"{usuarios[index]:<20}")  
        print(''.join(linha))
    
    print()




#? Ver conexões ativas ------------------------------------------------------------------------------------->

def verConexoesAtivas():
    banner()
    menu()
    subprocess.call(["smbstatus", "--resolve-uids", "--brief"])
    print()
    

#? Obter escolha do usuário --------------------------------------------------------------------------------->

def obterEscolha():
    while True:
        try:
            comando = int(input("Digite uma opção: "))
            if comando >= 0 and comando <= 14:
                return comando
            else:
                banner()
                menu()
                print("\033[1;31m Número fora do intervalo.\033[m\n")
        
        except ValueError:
            banner()
            menu()
            print("\033[1;31m Entrada inválida.\033[m\n")


#? Variáveis Globais ------------------------------------------------------------------------------------->

usuarios = carregarUsuariosSamba()
numeroColunas = 6
horario = datetime.now().strftime('%d/%m/%Y (%H:%M:%S):')


#? Main ------------------------------------------------------------------------------------->

banner()
menu()

comando = obterEscolha()

while comando != 0:
    if comando == 1:
        adicionarUsuario()
        usuarios = carregarUsuariosSamba()
        comando = obterEscolha()
    
    elif comando == 2:
        excluirUsuario()
        usuarios = carregarUsuariosSamba()
        comando = obterEscolha()
        
    elif comando == 3:
        bloquearUsuario()
        comando = obterEscolha()

    elif comando == 4:
        desbloquearUsuario()
        comando = obterEscolha()
    
    elif comando == 5:
        resetarSenha()
        comando = obterEscolha()
    
    elif comando == 6:
        exibirUsuarios(usuarios, numeroColunas)
        comando = obterEscolha()
    
    elif comando == 7:
        banner()
        menu()
        print("\033[1;31m Função exclusiva.\033[m\n")
        comando = obterEscolha()
    
    elif comando == 8:
        banner()
        menu()
        print("\033[1;31m Função exclusiva.\033[m\n")
        comando = obterEscolha()
        
    elif comando == 9:
        banner()
        menu()
        print("\033[1;31m Função exclusiva.\033[m\n")
        comando = obterEscolha()
    
    elif comando == 10:
        banner()
        menu()
        print("\033[1;31m Função exclusiva.\033[m\n")
        comando = obterEscolha()
        
    elif comando == 11:
        banner()
        menu()
        comando = obterEscolha()

    elif comando == 12:
        banner()
        menu()
        with open('/var/log/harpia.log', 'r') as arquivo:
            conteudo = arquivo.read()
        print(conteudo)
        comando = obterEscolha()

    elif comando == 13:
        verConexoesAtivas()
        comando = obterEscolha()
        

print("\n \033[0;36mSaindo... \033[m \n")